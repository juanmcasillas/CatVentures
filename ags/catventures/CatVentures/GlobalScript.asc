// main global script file
import InventoryItem*ItemGiven;        // Item given to a character




// called when the game starts, before the first room is loaded

// =======================================================================================
function game_start() 
{
  CatVentures.Init();

}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{

}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{

}

void ShowOptions()
{
    Verbs.UpdateActionBar();
    OptionGui.ShowOptions();
}


// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (keycode == eKeyF5) ShowOptions();
  if (keycode == eKeyCtrlC || keycode == eKeyCtrlQ) gQuit.Visible=true;  // Ctrl-C or CTRL-Q QUIT
  if (keycode == eKeyF12)   SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to ro 
  

}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{

}

function on_event(EventType event, int data) {
  if (event==eEventLeaveRoom)
  if (event==eEventRestoreGame) {
    Verbs.Localize();
  }
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame)
    player.PlaceOnWalkableArea();
}

function dialog_request(int param) {
}


////////////////////////////////////////////////////////////////////////////////////
// Begin of GUI handling
////////////////////////////////////////////////////////////////////////////////////
function Action_Click(GUIControl *control, MouseButton button) {
  Verbs.SetAction(Verbs.GetButtonAction(control.AsButton));
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control == btnInvUp) invMain.ScrollUp();
  else invMain.ScrollDown();  
}

function btnShowOptions_OnClick(GUIControl *control, MouseButton button)
{
  ShowOptions();
}

function btnOptions_OnClick(GUIControl *control, MouseButton button)
{
    OptionGui.OnClick(control, button);
}

function btnOptions_OnSliderChange(GUIControl *control)
{
    OptionGui.OnSliderChange(control);
}

function btnPlayer1_OnClick(GUIControl *control, MouseButton button)
{
  CatGame.ChangePlayer(cFirulais);
}

function btnPlayer2_OnClick(GUIControl *control, MouseButton button)
{
  CatGame.ChangePlayer(cCalcetines);
}

function btnPlayer3_OnClick(GUIControl *control, MouseButton button)
{
  CatGame.ChangePlayer(cMiki);
}

function btnPlayer4_OnClick(GUIControl *control, MouseButton button)
{
  CatGame.ChangePlayer(cTrufa);
}








////////////////////////////////////////////////////////////////////////////////////
// End of GUI handling
////////////////////////////////////////////////////////////////////////////////////


/* Character, Object, Hotspot full blown SAMPLE
function cChar_AnyClick() {
  // WALK TO
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO 
  else if (Verbs.UsedAction(eGA_TalkTo)) {
    Verbs.Unhandled();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO (characters only)
  else if(Verbs.UsedAction(eGA_GiveTo)) {
    Verbs.Unhandled();
  }  
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Verbs.Unhandled();
  }
  else Verbs.Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();

*/


/***********************************************************************
 * Inventory functions
 * 
 ***********************************************************************/


/***********************************************************************
 * Character functions
 * 
 ***********************************************************************/




function cCalcetines_AnyClick()
{
  //Walk to
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO
  if (Verbs.UsedAction(eGA_TalkTo)) {
    cCalcetines.ChangeView(1);
    cCalcetines.FaceCharacter(player);
   
   player.Walk(160, 155, eBlock, eWalkableAreas);
   player.FaceCharacter(cCalcetines);
   Wait(20);
   
   dDialog1.Start();
    // change view IN the dialog.
    //cCalcetines.ChangeView(4);

  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
   Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO
  else if (Verbs.UsedAction(eGA_GiveTo)) {
   Verbs.Unhandled();
  }
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
   Verbs.Unhandled();
  }
  else Verbs.Unhandled();
}




function cFirulais_AnyClick()
{
  //Walk to
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO
  if (Verbs.UsedAction(eGA_TalkTo)) {
   Verbs.Unhandled();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
   Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO
  else if (Verbs.UsedAction(eGA_GiveTo)) {
   Verbs.Unhandled();
  }
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
   Verbs.Unhandled();
  }
  else Verbs.Unhandled();
}


function cRat_AnyClick()
{
 if(Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
 }
 else if (Verbs.UsedAction(eGA_LookAt)) { 
    Verbs.MovePlayer(146, 146);
    player.Say("What a ugly rat.");
    player.FaceDirection(eDirectionDown);
    aRatSqueak.Play();
    cRat.Say("Eeeeeekkkkkk!!!!");
    player.Say("Looks good. For the dinner!!");
    cRat.Transparency=100;
    cRat.Clickable=false;
    player.AddInventory(iRat);
  }
  else Verbs.Unhandled();
}
//
// inventory methods.

function iKeys_AnyClick()
{
  
  
  if (Verbs.UsedAction(eGA_Use)) {
    player.Say("I need a lock to unlock");
    //Wait(10);
    //player.LoseInventory(iCup);
    //player.AddInventory(iCupEmpty);
    //player.AddInventory(iKeyCard);
    //player.Say("Voilà, I found a keycard.");
  }
  else if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It's a normal keyring with two small keys");
  }
  else Verbs.Unhandled();
  
  
}

function iRat_AnyClick()
{

 if (Verbs.UsedAction(eGA_LookAt)) { 
    player.Say("Ugly, but tasty");
  }
  else Verbs.Unhandled();
}

